import configparser
import ctypes
import inspect
import json
import math
import os
import random
import subprocess
import time
import webbrowser
import winsound
from threading import Thread

import cv2
import g4f
import numpy as np
import openai
import psutil
import pyautogui
import pyperclip
import pythoncom
import requests
import screen_brightness_control as sbc
from desktopmagic.screengrab_win32 import getDisplayRects, getRectAsImage
from pycbrf.toolbox import ExchangeRates
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from wmi import WMI

import keyboard_manager
import bot_manager
from config_manager import BOT_LICENSE, NIRCMD
import keyboard_manager
import license_manager
import ui
import utils

config=configparser.ConfigParser()
config.read("config.ini", encoding='utf-8')

messages = []

class Actions():
    dict_days_of_week={
        'Monday':'–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'Tuesday':'–í—Ç–æ—Ä–Ω–∏–∫',
        'Wednesday':'–°—Ä–µ–¥–∞',
        'Thursday':'–ß–µ—Ç–≤–µ—Ä–≥',
        'Friday':'–ü—è—Ç–Ω–∏—Ü–∞',
        'Saturday':'–°—É–±–±–æ—Ç–∞',
        'Sunday':'–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
    }
        
    dict_months = {
        'January':'–Ø–Ω–≤–∞—Ä—è',
        'February':'–§–µ–≤—Ä–∞–ª—è',
        'March':'–ú–∞—Ä—Ç–∞',
        'April':'–ê–ø—Ä–µ–ª—è',
        'May':'–ú–∞—è',
        'June':'–ò—é–Ω—è',
        'July':'–ò—é–ª—è',
        'August':'–ê–≤–≥—É—Å—Ç–∞',
        'September':'–°–µ–Ω—Ç—è–±—Ä—è',
        'October':'–û–∫—Ç—è–±—Ä—è',
        'November':'–ù–æ—è–±—Ä—è',
        'December':'–î–µ–∫–∞–±—Ä—è',
    }
  

    def del_tg_msg(self, message):
        delay = config.getfloat('Settings', 'del_delay')
        if delay != '':
            time.sleep(delay)
            for id in range(bot_manager.start_msg_id+1, message.id+1, 1):
                try:    
                        #–û—á–∏—Å—Ç–∞ –≤—Å–µ–≥–æ –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        if message.text in ('üñº–ú–µ–¥–∏–∞', '‚öôÔ∏è–ü–ö', 'üì±–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'üóÇ–ü—Ä–æ–≥—Ä–∞–º–º—ã','üß†ChatGPT','ü™Ñ–°—Ü–µ–Ω–∞—Ä–∏–∏','üåê–ò–Ω—Ç–µ—Ä–Ω–µ—Ç', 'üìπ–í–∏–¥–µ–æ','üéß–ú—É–∑—ã–∫–∞', 'üß©–ú–µ–Ω—é', '‚òÄÔ∏è–Ø—Ä–∫–æ—Å—Ç—å', 'üîã–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º –ü–ö', '‚å®Ô∏è–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–≤–∞–π—Å–∞–º–∏ –ü–ö', 'üñ±–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à–∫–æ–π', '‚å®Ô∏è–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', '‚ö†Ô∏è–ê–¥–º–∏–Ω', '‚ùå–ó–∞–∫—Ä—ã—Ç—å ChatGPT'):
                            if message.text == 'üìÅ–ü–∞–ø–∫–∏':
                                bot_manager.Telegram().bot.delete_message(message.from_user.id, id-1)
                            bot_manager.Telegram().bot.delete_message(message.from_user.id, id)
                            print('#–û—á–∏—Å—Ç–∞ –≤—Å–µ–≥–æ –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏')
                        
                        #–û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                        elif message.text in ('üîâ', 'üîá', 'üîä', '‚¨ÖÔ∏è','‚è∏','‚û°Ô∏è', '‚óÄÔ∏è–í–∏–¥–µ–æ', '–í–∏–¥–µ–æ‚ñ∂Ô∏è', 'üñ•–í–æ –≤–µ—Å—å —ç–∫—Ä–∞–Ω', '‚èÆ', '‚èØ', '‚è≠', 'üîí–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞', '‚ùå–ó–∞–∫—Ä—ã—Ç—å', 'üóí–î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á', 'üò¥–°–ø—è—â–∏–π —Ä–µ–∂–∏–º', 'üí§–ì–∏–±–µ—Ä–Ω–∞—Ü–∏—è','üîÑ–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞', 'üö´–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö', '–õ–ö–ú','–ü–ö–ú', 'üîº', '‚óÄÔ∏è','üîΩ','‚ñ∂Ô∏è', '‚òÄÔ∏è100%','‚òÄÔ∏è75%','‚òÄÔ∏è50%','‚òÄÔ∏è25%','‚òÄÔ∏è0%'):
                            bot_manager.Telegram().bot.delete_message(message.from_user.id, message.id)  
                            print('#–û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ')
                            return
                        
                        #–û—á–∏—Å—Ç–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
                        elif '–û—Ç–∫—Ä—ã—Ç—å' in message.text or '–°—Ü–µ–Ω–∞—Ä–∏–π' in message.text:
                              bot_manager.Telegram().bot.delete_message(message.from_user.id, message.id)
                              print('#–û—á–∏—Å—Ç–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤')
                              return
                        
                        #–û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—Ç–≤–µ—Ç–æ–º + —Ç–∞–π–º–µ—Ä, —Ç.–∫ –¥–∞—é—Ç –∏–Ω—Ñ—É
                        elif message.text in ('üíµ–î–æ–ª–ª–∞—Ä','üí∂–ï–≤—Ä–æ','‚õÖÔ∏è–ü–æ–≥–æ–¥–∞','ü§ë–ë–∏—Ç–∫–æ–∏–Ω','üïò–î–∞—Ç–∞','‚ùå–û—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞','üñ•–û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä','üóë–û—á–∏—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É', 'üßπ–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É Temp','üñ•–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ü–ö','üåêSpeedtest','üñº–°–∫—Ä–∏–Ω','üñº–°–∫—Ä–∏–Ω –í–µ–±-–∫–∞–º–µ—Ä—ã'):
                            bot_manager.Telegram().bot.delete_message(message.from_user.id, message.id)
                            if message.text in ('üåêSpeedtest', 'üñº–°–∫—Ä–∏–Ω –í–µ–±-–∫–∞–º–µ—Ä—ã', 'üñº–°–∫—Ä–∏–Ω'):
                                time.sleep(55)
                            time.sleep(5)
                            bot_manager.Telegram().bot.delete_message(message.from_user.id, message.id+1)
                            print('#–û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—Ç–≤–µ—Ç–æ–º + —Ç–∞–π–º–µ—Ä, —Ç.–∫ –¥–∞—é—Ç –∏–Ω—Ñ—É')
                            return
                        
                        #–û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–æ–ø. –∞—Ä—É–≥–º–µ–Ω—Ç–æ–º
                        elif message.text in ('–ó–≤—É–∫üîà','‚è≥–¢–∞–π–º–µ—Ä –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö','üîó–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É','ü§ñ–ö–æ–º–∞–Ω–¥–∞ –î–∂–∞—Ä–≤–∏—Å—É','üîê–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å','üñº–°–º–µ–Ω–∏—Ç—å –æ–±–æ–∏','‚úçÔ∏è–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞','üî†–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏','üñ±–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ X,Y'):
                            time.sleep(10)
                            bot_manager.Telegram().bot.delete_message(message.from_user.id, message.id)
                            bot_manager.Telegram().bot.delete_message(message.from_user.id, message.id+1)
                            bot_manager.Telegram().bot.delete_message(message.from_user.id, message.id+2)
                            bot_manager.Telegram().bot.delete_message(message.from_user.id, message.id+3)
                            print('#–û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–æ–ø. –∞—Ä—É–≥–º–µ–Ω—Ç–æ–º')
                            return
                except Exception as e:
                    pass

    def move_cursor_script(self, text) -> None:
        x=text.split(',')[0]
        y=text.split(',')[1]
        pyautogui.moveTo(int(x), int(y))
    
    def move_cursor(self, message) -> None:
        x=str(message.text).split(' ')[0]
        y=str(message.text).split(' ')[1]
        
        pyautogui.moveTo(int(x), int(y))
        
        return bot_manager.Telegram().bot.send_message(message.from_user.id, f'–ú—ã—à—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –Ω–∞ X={x}, Y={y} ‚úÖ')

    def explorer(self, path = None) -> None:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø–∞–ø–∫–∞—Ö."""
        user = os.environ.get( "USERNAME" )
        if path is None:
            path = f"C:\\Users\\{user}\\Desktop"
        buttons = ReplyKeyboardMarkup(resize_keyboard=True)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
        os.chdir(path)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        files = os.listdir()
        for file in files:
            buttons.row(file)
        
        return buttons

    def clean_temp_folder(self) -> None:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
        files_deleted = 0
        files_error = 0
        try:
            temp_folder = os.path.join(os.environ['TEMP'])
            for file_name in os.listdir(temp_folder):
                try:
                    file_path = os.path.join(temp_folder, file_name)
                    os.remove(file_path)
                    files_deleted+=1
                except Exception as e:
                    files_error+=1
        except Exception as e:
            pass
        return f'–£–¥–∞–ª–µ–Ω–æ {files_deleted} —Ñ–∞–π–ª–æ–≤, {files_error} —Ñ–∞–π–ª–æ–≤ –Ω–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.'

    def check_if_admin(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
        if not ctypes.windll.shell32.IsUserAnAdmin():
            ui.MainWindow().log_print('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')
            return False
        else:
            # ui.MainWindow().log_print('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã')
            return True

    def do_script(self, name) -> None:
        print('do script')
        SCRIPT_DICT = {
            '–ö—É—Ä—Å–æ—Ä –ø–æ X,Y': [Actions(), 'move_cursor_script'], 
            '–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã': [Actions(), 'open_exe_script'], 
            '–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã': [Actions(),'kill_process_script'],
            '–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç': [Actions(), 'open_url_script'],
            '–ü–æ–¥–æ–∂–¥–∞—Ç—å': [time, 'sleep'],
            'C–æ—á–µ—Ç–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à': [Actions(), 'press_btn_script'],
            '–ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç': [Actions(), 'write_text_script'],
            '–ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –º—ã—à–∏': [Actions(), 'press_mouse_btn_script'],
        }
        name = str(name).split()[1]
        with open('data_script.json', encoding='utf-8') as f:
            data = json.load(f)
        
        for script in data:
            if script['name'] in name:
                for command in dict(script['commands']):
                    comm = script['commands'][command][0]
                    arg = script['commands'][command][1]
                    func = getattr(SCRIPT_DICT[comm][0], SCRIPT_DICT[comm][1])
                    
                    if comm == '–ü–æ–¥–æ–∂–¥–∞—Ç—å':
                        arg = float(arg[0])
                        func(arg)
                    else:
                        func(arg[0])
        
    def kill_process_script(self, text) -> None:
        for proc in psutil.process_iter():
            if proc.name() == text:
                proc.kill()

    def open_exe_script(self, path) -> None:
        os.startfile(path)

    def open_exe(self, name) -> None:
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É —á–µ—Ä–µ–∑ –ø—É—Ç—å"""
        name = str(name).replace('–û—Ç–∫—Ä—ã—Ç—å ', '')
        with open('data_program.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        for i, programm in enumerate(data):
            if programm['name'] in name:
                path = programm['path']
                for domen in ('.com', '.ru', '.net', '.org'):
                    if domen in path:
                        path = 'www.' + path
                os.startfile(path)

    def stop_license(self):
        ui.MainWindow().log_print('–í–∞—à–∞ –ª–∏—Ü–µ–Ω–∑–∏—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∞.')
        BOT_LICENSE.send_message(license_manager.LICENSE().CHAT_ID, f'–£–¥–∞–ª–∏—Ç—å {license_manager.LICENSE().license_key()}\nhttps://pastebin.com/edit/T33R8zR8')
        os.rename('logs.txt', 'log.txt')
        user_path = os.path.expanduser('~') # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        open(f'{user_path}\system32.txt', 'w')
        utils.quit_window()

    def get_current_date(self) -> str:
        return(self.dict_days_of_week[time.strftime('%A')], time.strftime('%d'), self.dict_months[time.strftime('%B')])
        
    def get_current_time(self) -> str:
        return time.strftime('%X')
        
    def currensy_rates(self) -> str:
        rates = ExchangeRates(time.strftime('%Y-%m-%d'))
        return(str(rates['USD'].rate)[:5],str(rates['EUR'].rate)[:5])
    
    def bitcoin_rate(self) -> float:
        URL = 'https://blockchain.info/ru/ticker'
        HEADERS = {"X-Requested-With": "XMLHttpRequest",
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '
                        'Chrome/54.0.2840.99 Safari/537.36',
        }
        response = requests.get(URL, headers=HEADERS)
        response_json = response.json()
        return response_json["USD"]["last"]

    def weather(self) -> str:
        config=configparser.ConfigParser()
        config.read("config.ini", encoding='utf-8')
        weather = config.getboolean('Settings','weather')
        if weather:
            city_id = config.get('Settings','city_id')
            appid = "70ec1c470adcbcad3e1bb6bd0841af0e"
            try:
                city_id = int(city_id)
                params={'id': city_id, 'type': 'like', 'units': 'metric', 'APPID': appid, 'lang':'ru'}
            except:
                params={'q': city_id, 'type': 'like', 'units': 'metric', 'APPID': appid, 'lang':'ru'}
            try:
                res = requests.get("http://api.openweathermap.org/data/2.5/weather",
                params=params)
                data = res.json()
                city_name = data['name']
                status = str.title((data['weather'][0]['description']))
                temp = (data['main']['temp'])
                weather_str = f'\n‚õÖÔ∏è–í –≥–æ—Ä–æ–¥–µ {city_name} {status}, {temp}‚ÑÉ\n'
                return weather_str
            except Exception as e:
                ui.MainWindow().error_print(e)
                pass
        else:
            ui.MainWindow().log_print('–í–∫–ª—é—á–∏—Ç–µ –ø–æ–≥–æ–¥—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏ –≤–≤–µ–¥–∏—Ç–µ city_id')
            return

    def sound_answer(self, message):
        num = ('1','2','3', '4')
        dict ={
            'üñº–°–∫—Ä–∏–Ω':'bin/create.wav',
            'üñº–°–∫—Ä–∏–Ω –í–µ–±-–∫–∞–º–µ—Ä—ã':'bin/create.wav',
            'üîÑ–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞':'bin/create.wav',
            'üò¥–°–ø—è—â–∏–π —Ä–µ–∂–∏–º':'bin/pcoff.wav', 
            'üí§–ì–∏–±–µ—Ä–Ω–∞—Ü–∏—è':'bin/pcoff.wav',
            'üö´–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö':'bin/pcoff.wav',
            'üîí–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞':f'bin/sir{random.choice(num)}.wav',
            'üñº–°–º–µ–Ω–∏—Ç—å –æ–±–æ–∏':f'bin/sir{random.choice(num)}.wav',
            '‚òÄÔ∏è–Ø—Ä–∫–æ—Å—Ç—å':f'bin/sir{random.choice(num)}.wav',
            '‚ùå–ó–∞–∫—Ä—ã—Ç—å':f'bin/sir{random.choice(num)}.wav',
            'üóë–û—á–∏—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É':f'bin/sir{random.choice(num)}.wav',
            'üîã–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º –ü–ö':f'bin/sir{random.choice(num)}.wav',
            '‚å®Ô∏è–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–≤–∞–π—Å–∞–º–∏ –ü–ö':f'bin/sir{random.choice(num)}.wav',
            'üñ•–ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞':f'bin/sir{random.choice(num)}.wav',
            'üóí–î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á':'bin/create.wav',
            '‚è≥–¢–∞–π–º–µ—Ä –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö':f'bin/sir{random.choice(num)}.wav',
            'üóû–ù–æ–≤–æ—Å—Ç–∏':f'bin/sir{random.choice(num)}.wav',
            'üíµ–î–æ–ª–ª–∞—Ä':f'bin/sir{random.choice(num)}.wav',
            'ü§ë–ë–∏—Ç–∫–æ–∏–Ω':f'bin/sir{random.choice(num)}.wav',
            'üí∂–ï–≤—Ä–æ':f'bin/sir{random.choice(num)}.wav',
            '‚õÖÔ∏è–ü–æ–≥–æ–¥–∞':f'bin/sir{random.choice(num)}.wav',
            'üïò–î–∞—Ç–∞':f'bin/sir{random.choice(num)}.wav',
            'üîé–ü–æ–∏—Å–∫':f'bin/sir{random.choice(num)}.wav',
            '‚úâÔ∏è–ù–∞–π—Ç–∏ –≤ –í–ö':f'bin/sir{random.choice(num)}.wav',
            'üîó–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É':f'bin/sir{random.choice(num)}.wav',
            '‚òÄÔ∏è100%':f'bin/sir{random.choice(num)}.wav',
            '‚òÄÔ∏è0%':f'bin/sir{random.choice(num)}.wav',
            '‚òÄÔ∏è25%':f'bin/sir{random.choice(num)}.wav',
            '‚òÄÔ∏è50%':f'bin/sir{random.choice(num)}.wav',
            '‚òÄÔ∏è75%':f'bin/sir{random.choice(num)}.wav',
            'üñ±–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à–∫–æ–π':f'bin/sir{random.choice(num)}.wav',
            '‚å®Ô∏è–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π':f'bin/sir{random.choice(num)}.wav',
            'üñ•–û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä':f'bin/sir{random.choice(num)}.wav',
            'üìπ–í–∏–¥–µ–æ':f'bin/sir{random.choice(num)}.wav',
            'üéß–ú—É–∑—ã–∫–∞':f'bin/sir{random.choice(num)}.wav',
            '‚úçÔ∏è–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞':f'bin/sir{random.choice(num)}.wav',
            'üî†–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏':f'bin/sir{random.choice(num)}.wav',
            'üß†ChatGPT':f'bin/sir{random.choice(num)}.wav',
            'ü§ñ–ö–æ–º–∞–Ω–¥–∞ –î–∂–∞—Ä–≤–∏—Å—É':f'bin/sir{random.choice(num)}.wav',
            'üñ•–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ü–ö':f'bin/sir{random.choice(num)}.wav',
        }
        config=configparser.ConfigParser()
        config.read("config.ini", encoding='utf-8')
        if config.getboolean('Settings','voice_greet'):
            try:
                ans = dict[message]
            except KeyError:
                return
            winsound.PlaySound(ans, winsound.SND_FILENAME)

    def morning_sound_answer(self):
        """–†–∞–Ω–¥–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç –≥—Å –ø–æ–º–æ—â–Ω–∏–∫–∞."""
        ANSWERS = ["bin/Ans1.wav",
                    "bin/Ans2.wav",
                    "bin/Ans3.wav",
                    "bin/Ans4.wav",
        ]
        hour = int(time.strftime('%H'))
        config=configparser.ConfigParser()
        config.read("config.ini", encoding='utf-8')
        if config.getboolean('Settings','voice_greet'):
            if (hour >= 6) and (hour <= 12):
                winsound.PlaySound('bin/Ans5.wav', winsound.SND_FILENAME)
            else:
                winsound.PlaySound(random.choice(ANSWERS), winsound.SND_FILENAME)
      
    def create_start_response(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞."""
        config=configparser.ConfigParser()
        config.read("config.ini", encoding='utf-8')
        START_RESPONSE = f'üñê–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, —Å—ç—Äü§ñ\n\n'
        if config['Settings'].getboolean('date'):
            START_RESPONSE+= f'üïò–°–µ–≥–æ–¥–Ω—è {self.get_current_date()[0]}, {self.get_current_date()[1]} {self.get_current_date()[2]}\n'           
        if config['Settings'].getboolean('time'):
            START_RESPONSE+= f'‚è≥–í—Ä–µ–º—è: {self.get_current_time()}\n'
        if config['Settings'].getboolean('usd'):
            START_RESPONSE+= f'üíµ–î–æ–ª–ª–∞—Ä: {self.currensy_rates()[0]} RUB\n'
        if config['Settings'].getboolean('eur'):
            START_RESPONSE+= f'üí∂–ï–≤—Ä–æ: {self.currensy_rates()[1]} RUB\n'                 
        if config['Settings'].getboolean('btc'):
            START_RESPONSE+= f'ü§ë–ë–∏—Ç–∫–æ–∏–Ω: {self.bitcoin_rate()} USD\n'   
        if config['Settings'].getboolean('weather'):
            try:
                weather = self.weather()
                if weather == '':
                    bot_manager.Telegram().bot.send_chat_action(bot_manager.Telegram().chat_id, 'typing')
                    bot_manager.Telegram().bot.send_message(bot_manager.Telegram().chat_id, f'–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã. \n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ CITY_ID –≤ —Ñ–∞–π–ª–µ config.ini\n –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—á—Ç–∏—Ç–µ —Ñ–∞–π–ª README')
                else:
                    START_RESPONSE+= weather
            except Exception as e:
                ui.MainWindow().log_print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')
                ui.MainWindow().error_print(e)
                bot_manager.Telegram().bot.send_chat_action(bot_manager.Telegram().chat_id, 'typing')
                bot_manager.Telegram().bot.send_message(bot_manager.Telegram().chat_id, f'–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã. \n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ CITY_ID –≤ —Ñ–∞–π–ª–µ config.ini\n –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—á—Ç–∏—Ç–µ —Ñ–∞–π–ª README')
            
        return START_RESPONSE

    def pc_off_time(self, message) -> None:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ n —Å–µ–∫—É–Ω–¥."""
        try:
            seconds = int(message.text)
        except Exception as e:
            ui.MainWindow().error_print(e)
            return

        def shutdown():
            subprocess.call(['shutdown', '-s', '-t', str(seconds)])

        timer_thread = Thread(target=shutdown)
        timer_thread.start()

        bot_manager.Telegram().bot.send_chat_action(message.from_user.id, 'typing')
        bot_manager.Telegram().bot.send_message(message.from_user.id,
                        f'–ö–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ {seconds} —Å–µ–∫—É–Ω–¥‚è≥'
        )
        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –¢–∞–π–º–µ—Ä –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')

        
    def set_volume(self, message) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ n."""
        vol = message.text
        subprocess.call(f'{NIRCMD} setsysvolume {int(vol) * 655}')
        bot_manager.Telegram().bot.send_chat_action(message.from_user.id, 'typing')
        bot_manager.Telegram().bot.send_message(message.from_user.id,
                        f'–ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {vol} –µ–¥–∏–Ω–∏—Üüîà'
        )
        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ó–≤—É–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
    
    def open_url_script(self, text) -> None:
        url = text
        if 'https://' not in text:
            url = 'https://' + text
        webbrowser.open(url, new=2)

    def open_url(self, message) -> None:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ url —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"""
        url = message.text
        if 'https://' not in url:
            url = 'https://' + url
        webbrowser.open(message.text, new=2)
        msg = f'–°c—ã–ª–∫–∞ - {message.text} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞'
        bot_manager.Telegram().bot.send_chat_action(message.from_user.id, 'typing')
        bot_manager.Telegram().bot.send_message(message.from_user.id,
                                    msg
        )
        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
        
    def text_to_jarvis(self, message) -> None:
        """–ü–µ—Ä–µ–¥–∞—á–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –î–∂–∞—Ä–≤–∏—Å–∞"""
        jarvis_link = bot_manager.Telegram().jarvis_link
        
        if not jarvis_link == '':
            text = message.text
            requests.get(jarvis_link + text)
            bot_manager.Telegram().bot.send_chat_action(message.from_user.id, 'typing')
            bot_manager.Telegram().bot.send_message(message.from_user.id, text=f'"{text}" —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ –î–∂–∞—Ä–≤–∏—Å–∞ü§ñ')
            ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ö–æ–º–∞–Ω–¥–∞ –î–∂–∞—Ä–≤–∏—Å—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
        else:
            bot_manager.Telegram().bot.send_chat_action(message.from_user.id, 'typing')
            bot_manager.Telegram().bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–∞ –î–∂–∞—Ä–≤–∏—Å–∞ –≤ —Ñ–∞–π–ª–µ config.ini.')
        
    def new_password(self, message) -> None:
        """–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è —Å–∏—Å—Ç–µ–º—ã"""
        WindowsUser = os.environ.get( "USERNAME" )
        if message.text == '0000':
            subprocess.call(f'net users {WindowsUser} ""', shell = True)
            bot_manager.Telegram().bot.send_chat_action(message.from_user.id, 'typing')
            bot_manager.Telegram().bot.send_message(message.from_user.id, text=f'–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω‚úÖ')
        else: 
            subprocess.call(f'net user {WindowsUser} {message.text}', shell=True)
            bot_manager.Telegram().bot.send_chat_action(message.from_user.id, 'typing')
            bot_manager.Telegram().bot.send_message(message.from_user.id, text=f'–ü–∞—Ä–æ–ª—å "{message.text}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω‚úÖ')
        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
    
    def wallpaper(self, message):    
        try:
            file_info = bot_manager.Telegram().bot.get_file(message.photo[len(message.photo) - 1].file_id)
            downloaded_file = bot_manager.Telegram().bot.download_file(file_info.file_path)
            src = os.path.abspath(file_info.file_path)
            with open(src, 'wb') as new_file:
                new_file.write(downloaded_file)
            ctypes.windll.user32.SystemParametersInfoW(20, 0, src, 0)
            bot_manager.Telegram().bot.reply_to(message, '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±–æ–∏, —Å—ç—Äüñº')
            new_file.close()
            os.remove(file_info.file_path)
            ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –°–º–µ–Ω–∏—Ç—å –æ–±–æ–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
        except Exception as e:
            ui.MainWindow().error_print(e)
            ui.MainWindow().log_print('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ photos –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.')
            bot_manager.Telegram().bot.reply_to(message, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é')

    def write_text_script(self, text) -> None:
        try:
            pyperclip.copy(text)
            keyboard_manager.press_and_release('ctrl + v')
        except:
            return

    def write_text(self, message, interval=0.01):
        try:
            pyperclip.copy(message.text)
            keyboard_manager.press_and_release('ctrl + v')
        except:
            return
        bot_manager.Telegram().bot.send_chat_action(message.from_user.id, 'typing')
        bot_manager.Telegram().bot.send_message(message.from_user.id, f'"{message.text}" —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–æ‚úÖ')
        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')

    def press_mouse_btn_script(self, text) -> None:
        if text.lower() == '–ª–∫–º':
            pyautogui.leftClick()
        if text.lower() == '–ø–∫–º':
            pyautogui.rightClick()
        if text.lower() == '—Å–∫–º':
            pyautogui.middleClick()

    def press_btn_script(self, text) -> None:
        keyboard_manager.send(text)

    def press_btn(self, message):
        try:
            keyboard_manager.send(message.text)
        except:
            bot_manager.Telegram().bot.send_message(message.from_user.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏..')
            pass
        bot_manager.Telegram().bot.send_chat_action(message.from_user.id, 'typing')
        bot_manager.Telegram().bot.send_message(message.from_user.id, f'–ö–Ω–æ–ø–∫–∞ "{message.text}" —É—Å–ø–µ—à–Ω–æ –Ω–∞–∂–∞—Ç–∞‚úÖ')
        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')

    def screen(self, message):
        screens=(getDisplayRects())
        for monitor in range(0, len(screens)):
            rect = getRectAsImage(screens[monitor])
            rect.save(f'screen_{monitor}.jpg',format='png')
            bot_manager.Telegram().bot.send_chat_action(message.from_user.id, 'upload_photo')
            with open (f'screen_{monitor}.jpg', 'rb') as p:
                bot_manager.Telegram().bot.send_document(message.from_user.id,p)
                p.close()
            os.remove(f'screen_{monitor}.jpg')
        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –°–∫—Ä–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
    
    def webcam_screen(self, message):
        try:
            bot_manager.Telegram().bot.send_chat_action(message.from_user.id, 'upload_photo')
            cap = cv2.VideoCapture(0)
            for i in range(3):
                cap.read()
            ret, frame = cap.read()
            cv2.imwrite('Webcam.jpg', frame)   
            cap.release()
            webcam = open('Webcam.jpg', 'rb')
            bot_manager.Telegram().bot.send_photo(message.from_user.id, webcam)
            webcam.close()
            os.remove('Webcam.jpg')
            ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –°–∫—Ä–∏–Ω –í–µ–±-–∫–∞–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
        except Exception as e:
            ui.MainWindow().error_print(e)
            bot_manager.Telegram().bot.send_chat_action(message.from_user.id, 'typing')
            bot_manager.Telegram().bot.send_message(message.from_user.id, '*–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*', parse_mode="Markdown")

    def set_bright(self, message, set_int):
        try:
            for monitor in sbc.list_monitors():
                sbc.set_brightness(value=set_int, display=monitor)
            ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –Ø—Ä–∫–æ—Å—Ç—å {set_int}% –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
        except sbc.ScreenBrightnessError as e:
            ui.MainWindow().error_print(e)
            ui.MainWindow().log_print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è—Ä–∫–æ—Å—Ç–∏')
            pass
    
    def api_key(self):
        return config.get('Settings','gpt_api')
    
    def chatgpt_text(self, message, text=None, msg=None):
        '''–ü–æ–ª—É—á–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT —á–µ—Ä–µ–∑ g4f'''
        global CHAT_GPT
        if message.text == '‚ùå–ó–∞–∫—Ä—ã—Ç—å ChatGPT':
            CHAT_GPT = False
            keyboard_manager.Keyboard().add_buttons_menu(message.from_user.id)
            bot_manager.Telegram().bot.send_chat_action(message.from_user.id, 'typing')
            return Thread(target= Actions().del_tg_msg, args=(message,)).start()
        
        if text is None:
            prompt = message.text
        else:
            prompt = text
        
        if msg is None:
            print('–ü–µ—Ä–≤–æ–µ —Å–º—Å')
            msg = bot_manager.Telegram().bot.send_message(message.from_user.id, 'ChatGPT –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç üí¨')
        else:
            print('–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', msg.text)
            bot_manager.Telegram().bot.edit_message_text(chat_id=message.from_user.id, message_id=msg.id, text='ChatGPT –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç üí¨')
        
        try:
            response = g4f.ChatCompletion.create(
                model=g4f.models.gpt_35_long,
                messages=[{"role": "user", "content": prompt}])
            
            if  response != '':
                try:
                    bot_manager.Telegram().bot.edit_message_text(chat_id=message.from_user.id, message_id=msg.id, text=f'üß†ChatGPT: {response}', parse_mode='Markdown')
                except Exception as e:
                    bot_manager.Telegram().bot.edit_message_text(chat_id=message.from_user.id,message_id=msg.id, text=f'üß†ChatGPT: {response}')
            else:
                print('–û—Ç–≤–µ—Ç –ø—É—Å—Ç')
            messages.clear()
        
        except Exception as e:
            messages.clear()
            bot_manager.Telegram().bot.edit_message_text(chat_id=message.from_user.id, message_id=msg.id, text=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ–±—É—é –µ—â–µ —Ä–∞–∑...‚Ññ{len(inspect.getouterframes(inspect.currentframe()))-3}ü´¢')
            time.sleep(2)
            if len(inspect.getouterframes(inspect.currentframe())) <= 5:
                return self.chatgpt_text(message=message, msg=msg)
            else:
                bot_manager.Telegram().bot.edit_message_text(chat_id=message.from_user.id, message_id=msg.id, text=f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üôè')
                return False

    # –ï—Å–ª–∏ –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –∞–ø–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç

    # def chatgpt_photo_api(self, message, text=None, msg=None):
    #     bot_manager.Telegram().bot.send_message(message.from_user.id, 'ChatGPT –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ...')
    #     try:
    #         response = openai.Image.create(
    #                 prompt=message.text,
    #                 n=1,
    #                 size="1024x1024"
    #         )
    #     except Exception as e:
    #         ui.MainWindow().error_print(e)
    #         return
        
    #     chat_response = response['data'][0]['url']
    #     bot_manager.Telegram().bot.send_photo(message.from_user.id, chat_response)

    def chatgpt_text_api(self, message, text=None, msg=None):
        openai.api_key = self.api_key()
        '''–ü–æ–ª—É—á–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT —á–µ—Ä–µ–∑ g4f'''
        if text is None:
            prompt = message.text
        else:
            prompt = text
        
        if msg is None:
            print('–ü–µ—Ä–≤–æ–µ —Å–º—Å')
            msg = bot_manager.Telegram().bot.send_message(message.from_user.id, 'ChatGPT –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç üí¨')
        else:
            print('–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', msg.text)
        bot_manager.Telegram().bot.edit_message_text(chat_id=message.from_user.id, message_id=msg.id, text='ChatGPT –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç üí¨')
        messages.append(({"role": "user", "content": prompt}))
        try:
            completion = openai.ChatCompletion.create(
                                model="gpt-3.5-turbo",
                                messages=messages,
                                max_tokens = 1000,
                                temperature = 0.5
                                )
            ans = str(completion.choices[0].message.content).strip()
            bot_manager.Telegram().bot.send_message(message.from_user.id, ans)
            ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ó–∞–ø—Ä–æ—Å ChatGPT –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
        except Exception as e:
            ui.MainWindow().error_print(e)
            return

    def video_record(self, message):
        try:
            os.remove('video.mp4')
        except:
            pass
        bot_manager.Telegram().bot.send_message(message.from_user.id, '–ó–∞–ø–∏—Å—ã–≤–∞—é –≤–∏–¥–µ–æ...')
        TIME = 60
        SCREEN_SIZE = tuple(pyautogui.size())
        fourcc = cv2.VideoWriter_fourcc('a','v','c','1')
        out = cv2.VideoWriter("video.mp4", fourcc, 20.0, (SCREEN_SIZE))
        fps = 20.0
        chat_id = config['Settings']['chat_id']
        chat_id = chat_id.split(', ')
        bot_manager.Telegram().bot.send_chat_action(message.from_user.id, 'record_video')
        for i in range(int(TIME * fps)):
            img = pyautogui.screenshot()
            frame = np.array(img)
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            out.write(frame)
        cv2.destroyAllWindows()
        out.release()
        try:
            with open('video.mp4', 'rb') as video:
                bot_manager.Telegram().bot.send_document(message.from_user.id, video)
            video.close()
            os.remove('video.mp4')
        except Exception as e:
            ui.MainWindow().error_print(e)
            pass
    
    def pc_param(self, message):
        pythoncom.CoInitialize()
        msg=''
        computer = WMI()
        os_info = computer.Win32_OperatingSystem()[0]
        proc_info = computer.Win32_Processor()[0]
        gpu_info = computer.Win32_VideoController()[0]
        os_name = str(os_info.Name.encode('utf-8').split(b'|')[0])
        os_name = os_name.replace(os_name.split(' ')[0], '').replace("'", '')
        os_version = ' '.join([os_info.Version, os_info.BuildNumber])
        system_ram = round(float(os_info.TotalVisibleMemorySize) / 1048576)  # KB to GB
        parametrs = [f'–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {proc_info.Name}', f'–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: {gpu_info.Name}', f'–°–∏—Å—Ç–µ–º–∞: {str(os_name)}', f'–í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã: {os_version}', f'–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: {system_ram} –ì–ë']
        for param in parametrs:
            msg += f'{str(param).strip()}\n'

        bot_manager.Telegram().bot.send_message(message.from_user.id, msg)
        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')

class Explorer():
    global edit_msg, path, page, all_path
    
    drives_in = []
    drives_names = []
    folders_names = {}
    
    edit_msg = None
    path = ''
    page = 1
    
    all_path = ''

    def scanning_drives(self):
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏—Å–∫–æ–≤, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ drives_in –∏ —Å–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω - –∫–Ω–æ–ø–∫–∏
        drives = psutil.disk_partitions()

        self.drives_in.clear()
        self.drives_names.clear()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–∫–∏ –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å
        for drive in drives:
            try:
                drive_usage = psutil.disk_usage(drive.mountpoint)

                # –ï—Å–ª–∏ –æ–±—ä–µ–º –¥–∏—Å–∫–∞ –±–æ–ª—å—à–µ 0, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –≤ –º–∞—Å—Å–∏–≤
                if drive_usage.total > 0:
                    self.drives_in.append(InlineKeyboardButton(drive.device, callback_data=drive.device))
                    self.drives_names.append(drive.device)
            except Exception as e:
                print(f"{e}\n\n")

        # –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–∞–ø —Å –¥–∏—Å–∫–∞–º–∏
        drives_markup = InlineKeyboardMarkup(row_width=5).add(*self.drives_in)
        drives_markup.add(InlineKeyboardButton('üèö–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª', callback_data='desktop'))
        return drives_markup


    def scanning_folders(self, path, page=1, items_per_page=20):
        global all_path

        if path in self.drives_in:
            all_path = path

        if path in self.folders_names.keys():
            slash = ''

            if all_path[-1] != '\\':
                slash = '\\'

            all_path = all_path + slash + self.folders_names.get(path)
            direct = os.listdir(all_path)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –ø–æ –ø—É—Ç–∏
        else:
            all_path = path
            direct = os.listdir(path)

        folders = []  # –°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫

        for folder in direct:
            # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ —Å–ø–∏—Å–æ–∫
            if folder[0] != '.' and folder[0] != '$':
                folders.append(folder)

        if path in self.drives_in:  # –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ—Ä–Ω–µ–≤–∞—è (–Ω–∞—á–∞–ª–æ –æ–¥–Ω–æ–≥–æ –∏–∑ –¥–∏—Å–∫–æ–≤) –ø—Ä–∏–±–∞–≤–ª—è–µ–º –∫ –¥–∏—Å–∫—É –ø–∞–ø–∫—É
            name = self.folders_names.get(path)  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–∞–ø–∫–∏ –ø–æ –µ–µ –∫–ª—é—á—É
            path += f'{name}'
        else:
            name = self.folders_names.get(path)
            path += f'\\{name}'

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_index = (page - 1) * items_per_page
        end_index = start_index + items_per_page

        pages = math.ceil((len(folders) / items_per_page))  # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü

        inline_folders = []  # –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–∞–ø–æ–∫ –∏ –∫–æ–ª–ª–±—ç–∫–∞–º–∏ –≤ –≤–∏–¥–µ –∏—Ö –∫–ª—é—á–µ–π
        self.folders_names.clear()

        i = 0

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å Inline-–∫–Ω–æ–ø–∫–∞–º–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        for folder in folders[start_index:end_index]:
            #  –ú–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –Ω–∞ users
            if folder.lower() == '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' or folder.lower() == '%1$d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
                name_folder = 'Users'

            # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∏–º—è –ø–∞–ø–∫–∏
            else:
                name_folder = folder

            # –ï—Å–ª–∏ –∏–º—è –ø–∞–ø–∫–∏ –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤, —É–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ
            if len(name_folder) > 20:
                name_folder = name_folder[:10] + '...' + name_folder[-10:]

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–∫—É —Å –ø–∞–ø–∫–æ–π
            inline_folders.append(InlineKeyboardButton(f'{name_folder}', callback_data=str(i)))
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ –µ–µ –∫–ª—é—á—É
            self.folders_names[str(i)] = folder
            i += 1

        # –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–∞–ø —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–ø–æ–∫
        folders_markup = InlineKeyboardMarkup(row_width=2).add(*inline_folders)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        previous_button = InlineKeyboardButton('‚óÄ –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', callback_data='previous_page')
        next_button = InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚ñ∂', callback_data='next_page')

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –º–∞—Ä–∫–∞–ø
        if page == 1 and pages > 1:
            folders_markup.row(next_button)
        elif page > 1 and page < pages:
            folders_markup.row(previous_button, next_button)
        elif pages <= 1:
            pass
        else:
            folders_markup.row(previous_button)

        # –ï—Å–ª–∏ –ø—É—Ç—å —ç—Ç–æ –¥–∏—Å–∫ –∏–∑ –º–∞—Å—Å–∏–≤–∞
        path = path.replace('None', '')

        if self.comparison_path(path):
            go_back_to_drives = InlineKeyboardButton('‚óÄ –ö –¥–∏—Å–∫–∞–º', callback_data='back_to_drives')
            folders_markup.row(go_back_to_drives)
        else:
            go_back_to_drives = InlineKeyboardButton('‚óÄ –ö –¥–∏—Å–∫–∞–º', callback_data='back_to_drives')
            go_back_explorer = InlineKeyboardButton('‚óÄ –ù–∞–∑–∞–¥', callback_data='back_explorer')
            folders_markup.row(go_back_explorer, go_back_to_drives)

        return all_path, page, folders_markup
    
    def back_path(self):
        global path

        path_list = path.split('\\')
        path_list.pop(-1)
        path = ''

        for i in path_list:
            if i != '':
                path += i
            if i != path_list[-1] or path[-1] == ':':
                path += '\\'

    def comparison_path(self, path):
        for i in self.drives_names:
            i += '\\'
            if path == i:
                return True
            else:
                pass
        return False


    script_file_btns = [InlineKeyboardButton('üñ• –ó–∞–ø—É—Å—Ç–∏—Ç—å', callback_data='run'),
                        InlineKeyboardButton('üì≤ –°–∫–∞—á–∞—Ç—å', callback_data='download'),
                        InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å', callback_data='delete'),
                        InlineKeyboardButton('‚óÄ –ù–∞–∑–∞–¥', callback_data='back_explorer')]

    script_file_markup = InlineKeyboardMarkup(row_width=1).add(*script_file_btns)
