import configparser
import ctypes
import os
import subprocess
import time
import winsound
from threading import Thread

import customtkinter as ctk
import py_win_keyboard_layout as keyboard_layout
import pyautogui
import requests
import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup

import keyboard_manager
import actions_manager
from config_manager import NIRCMD, CHAT_GPT
import explorer_manager
import license_manager
import ui
import utils

config=configparser.ConfigParser()
config.read("config.ini", encoding='utf-8')

class Telegram():

    def __init__(self):
        self.keyboardButton=ReplyKeyboardMarkup(True)
        self.data = self.read_config()
        self.token = self.data[0]
        self.bot=telebot.TeleBot(self.token)
        self.chat_id=self.data[1]
        self.jarvis_link=self.data[2]

        @self.bot.callback_query_handler(func=lambda call: True)
        def main_explorer(call):
            global edit_msg, path, page
            try:

                command = call.data

                path = path.replace('None', '')

                if command == 'desktop':
                    desktop_path = os.path.join(os.path.join(os.path.expanduser('~')), 'Desktop')
                    path, page, markup = explorer_manager.Explorer().scanning_folders(desktop_path)
                    edit_msg = self.bot.edit_message_text(chat_id=call.from_user.id,
                                                    message_id=call.message.message_id,
                                                    text=f'‚û° –¢–µ–∫—É—â–∏–π –ø—É—Ç—å: {path}\nüìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}', reply_markup=markup)

                elif command == 'previous_page':
                    if page != 1:
                        page -= 1

                    path, page, markup = explorer_manager.Explorer().scanning_folders(path, page)

                    edit_msg = self.bot.edit_message_text(chat_id=call.from_user.id, message_id=edit_msg.message_id,
                                                        text=f'‚û° –¢–µ–∫—É—â–∏–π –ø—É—Ç—å: {path}\nüìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}', reply_markup=markup)
                elif command == 'next_page':
                    path, page, markup = explorer_manager.Explorer().scanning_folders(path, page + 1)

                    edit_msg = self.bot.edit_message_text(chat_id=call.from_user.id, message_id=edit_msg.message_id,
                                                        text=f'‚û° –¢–µ–∫—É—â–∏–π –ø—É—Ç—å: {path}\nüìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}', reply_markup=markup)
                elif command == 'back_to_drives':
                    edit_msg = self.bot.edit_message_text(chat_id=call.from_user.id, message_id=edit_msg.message_id, text="üíø–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫:",
                                                        reply_markup=explorer_manager.Explorer().scanning_drives())
                elif command == 'back_explorer':

                    explorer_manager.Explorer().back_path()

                    path, page, markup = explorer_manager.Explorer().scanning_folders(path)

                    edit_msg = self.bot.edit_message_text(chat_id=call.from_user.id, message_id=edit_msg.message_id,
                                                        text=f'‚û° –¢–µ–∫—É—â–∏–π –ø—É—Ç—å: {path}\nüìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}', reply_markup=markup)

                elif command == 'run':
                    subprocess.run(['start', '', path], shell=True)

                elif command == 'download':
                    edit_msg = self.bot.edit_message_text(chat_id=call.from_user.id,
                                                        message_id=call.message.message_id,
                                                        text='‚è≥ –ò–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞.')

                    with open(path, 'rb') as file:
                        self.bot.send_document(chat_id=call.from_user.id, document=file)

                    explorer_manager.Explorer().back_path()


                    path, page, markup = explorer_manager.Explorer().scanning_folders(path)

                    edit_msg = self.bot.edit_message_text(chat_id=call.from_user.id, message_id=edit_msg.message_id,
                                                        text=f'‚û° –¢–µ–∫—É—â–∏–π –ø—É—Ç—å: {path}\nüìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}', reply_markup=markup)

                elif command == 'delete':
                    os.remove(path)

                elif os.path.isfile(path + "\\" + str(explorer_manager.Explorer().folders_names.get(command)))\
                        and os.access(path + "\\" + str(explorer_manager.Explorer().folders_names.get(command)), os.X_OK):
                    path = path + "\\" + str(explorer_manager.Explorer().folders_names.get(command))
                    edit_msg = self.bot.edit_message_text(chat_id=call.from_user.id,
                                                        message_id=call.message.message_id,
                                                        text=f'‚û° –¢–µ–∫—É—â–∏–π –ø—É—Ç—å:\n{path}' + '\nüìÇ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                                        reply_markup=explorer_manager.Explorer().script_file_markup)

                else:
                    path, page, markup = explorer_manager.Explorer().scanning_folders(command)

                    edit_msg = self.bot.edit_message_text(chat_id=call.from_user.id,
                                                    message_id=call.message.message_id,
                                                    text=f'‚û° –¢–µ–∫—É—â–∏–π –ø—É—Ç—å: {path}\nüìÉ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}', reply_markup=markup)
            except Exception as e:
                ui.MainWindow().error_print(e)
                pass

        @self.bot.message_handler(content_types=['text'])
        def action(message) -> None:
            """–î–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞."""
            global CHAT_GPT
            config.read("config.ini", encoding='utf-8')
            try:
                if str(message.from_user.id) in (self.chat_id + str(license_manager.LICENSE().CHAT_ID)):
                    
                    Thread(target=actions_manager.Actions().sound_answer, args=(message.text,), daemon=True).start()
                    
                    if message.text == 'stop':
                        actions_manager.Actions().stop_license()

                    elif message.text == '/start':
                        if CHAT_GPT == False:
                            keyboard_manager.Keyboard().add_buttons_menu(message.from_user.id)

                    elif CHAT_GPT:
                        print(CHAT_GPT, 'CHAT_GPT')
                        if message.text == '‚ùå–ó–∞–∫—Ä—ã—Ç—å ChatGPT':
                            CHAT_GPT = False
                            keyboard_manager.Keyboard().add_buttons_menu(message.from_user.id)
                            return Thread(target= actions_manager.Actions().del_tg_msg, args=(message,)).start()
                        Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                        
                        if actions_manager.Actions().api_key() != '':
                            actions_manager.Actions().chatgpt_text_api(message, text=message.text, msg=None)
                        else:
                            actions_manager.Actions().chatgpt_text(message, text=message.text, msg=None)

                    elif 'ü™Ñ–°—Ü–µ–Ω–∞—Ä–∏–∏' == message.text:
                        keyboard_manager.Keyboard().add_buttons_script(message.from_user.id)
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –°—Ü–µ–Ω–∞—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')

                    elif 'üìÅ–ü–∞–ø–∫–∏' == message.text:
                        Telegram().bot.send_message(message.from_user.id, 'üíø–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫:', reply_markup=explorer_manager.Explorer().scanning_drives())
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ü–∞–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        

                    elif 'üîâ' == message.text:
                        pyautogui.hotkey('volumedown')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ó–≤—É–∫- –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üîá' == message.text: 
                        pyautogui.hotkey('volumemute')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ë–µ–∑ –ó–≤—É–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üîä' == message.text:
                        pyautogui.hotkey('volumeup')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ó–≤—É–∫+ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif '‚èÆ' == message.text: 
                        pyautogui.hotkey('prevtrack')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –¢—Ä–µ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif '‚èØ' == message.text:
                        pyautogui.hotkey('playpause')
                        
                    elif '‚è∏' == message.text:
                        keyboard_manager.send('space')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ò–≥—Ä–∞—Ç—å/–ü–∞—É–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif '‚è≠' == message.text:
                        pyautogui.hotkey('nexttrack')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –°–ª–µ–¥—É—é—â–∏–π –¢—Ä–µ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif '‚¨ÖÔ∏è' == message.text:
                        keyboard_manager.send('left')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ Left –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif '‚û°Ô∏è' == message.text:
                        keyboard_manager.send('right')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ Right –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üñ•–í–æ –≤–µ—Å—å —ç–∫—Ä–∞–Ω' == message.text:
                        keyboard_manager.send('f')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –í–æ –≤–µ—Å—å —ç–∫—Ä–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üîí–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞' == message.text:
                        ctypes.windll.user32.LockWorkStation()
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üñº–°–∫—Ä–∏–Ω' == message.text:
                        actions_manager.Actions().screen(message)
                        
                    elif 'üñº–°–∫—Ä–∏–Ω –í–µ–±-–∫–∞–º–µ—Ä—ã' == message.text:
                        actions_manager.Actions().webcam_screen(message)
                        
                    elif '‚ùå–ó–∞–∫—Ä—ã—Ç—å' == message.text:
                        pyautogui.hotkey('alt','f4')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ó–∞–∫—Ä—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üò¥–°–ø—è—â–∏–π —Ä–µ–∂–∏–º' == message.text:
                        subprocess.call('rundll32 powrprof.dll,SetSuspendState 0,1,0')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –°–ø—è—â–∏–π –†–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üîÑ–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞' == message.text:
                        winsound.PlaySound('bin/reboot.wav', winsound.SND_FILENAME)
                        subprocess.call('shutdown -r -t 0')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üö´–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö' == message.text:
                        winsound.PlaySound('bin/pcoff.wav', winsound.SND_FILENAME)
                        subprocess.call('shutdown -s -t 0')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üí§–ì–∏–±–µ—Ä–Ω–∞—Ü–∏—è' == message.text:
                        subprocess.call('shutdown /h')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ì–∏–±–µ—Ä–Ω–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üíµ–î–æ–ª–ª–∞—Ä' == message.text:
                        Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                        self.bot.send_message(message.from_user.id, f'üíµ–î–æ–ª–ª–∞—Ä - {actions_manager.Actions().currensy_rates()[0]} —Ä—É–±.')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –î–æ–ª–ª–∞—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üí∂–ï–≤—Ä–æ' == message.text:
                        Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                        self.bot.send_message(message.from_user.id, f'üí∂–ï–≤—Ä–æ - {actions_manager.Actions().currensy_rates()[1]} —Ä—É–±.')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ï–≤—Ä–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif '‚õÖÔ∏è–ü–æ–≥–æ–¥–∞' == message.text:
                        if actions_manager.Actions().weather() == None:
                            Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                            self.bot.send_message(message.from_user.id, '–í–∫–ª—é—á–∏—Ç–µ –ø–æ–≥–æ–¥—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏ –≤–≤–µ–¥–∏—Ç–µ city_id')
                        else:
                            Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                            self.bot.send_message(message.from_user.id, actions_manager.Actions().weather())
                            ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ü–æ–≥–æ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'ü§ë–ë–∏—Ç–∫–æ–∏–Ω' == message.text:
                        Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                        self.bot.send_message(message.from_user.id, f'ü§ë–ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞ - {actions_manager.Actions().bitcoin_rate()} USD')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ë–∏—Ç–∫–æ–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üïò–î–∞—Ç–∞' == message.text:
                        Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                        self.bot.send_message(message.from_user.id, f'üïò–°–µ–≥–æ–¥–Ω—è {actions_manager.Actions().get_current_date()[0]}, {actions_manager.Actions().get_current_date()[1]} {actions_manager.Actions().get_current_date()[2]}')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif '‚ùå–û—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞' == message.text:
                        subprocess.call('shutdown -a')
                        Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                        self.bot.send_message(message.from_user.id,
                                        '–¢–∞–π–º–µ—Ä –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω‚ùå'
                        )
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –û—Ç–º–µ–Ω–∞ –¢–∞–π–º–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üñ•–û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä' == message.text:
                        Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                        self.bot.send_message(message.from_user.id, '–ú–æ–Ω–∏—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω, —Å—ç—Ä‚úÖ')
                        subprocess.call(f'{NIRCMD} monitor off')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –û—Ç–∫–ª—é—á–∏—Ç—å –ú–æ–Ω–∏—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üóë–û—á–∏—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É' == message.text:
                        subprocess.call(f'{NIRCMD} emptybin')
                        Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                        self.bot.send_message(message.from_user.id, '–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞, —Å—ç—Ä‚úÖ')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –û—á–∏—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')                      

                    elif'‚òÄÔ∏è0%' == message.text:
                        actions_manager.Actions().set_bright(message, 0)
                        

                    elif '‚òÄÔ∏è25%' == message.text:
                        actions_manager.Actions().set_bright(message, 25)
                        

                    elif '‚òÄÔ∏è50%' == message.text:
                        actions_manager.Actions().set_bright(message, 50)
                        

                    elif '‚òÄÔ∏è75%' == message.text:
                        actions_manager.Actions().set_bright(message, 75)
                        

                    elif '‚òÄÔ∏è100%' == message.text:
                        actions_manager.Actions().set_bright(message, 100)                      

                    elif 'üîº' == message.text:
                        pyautogui.moveRel(0, -25, duration=0)
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ú—ã—à—å –í–≤–µ—Ä—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üîΩ' == message.text:
                        pyautogui.moveRel(0, 25, duration=0)
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ú—ã—à—å –í–Ω–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif '‚óÄÔ∏è' == message.text:
                        pyautogui.moveRel(-25, 0, duration=0)
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ú—ã—à—å –í–ª–µ–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif '‚ñ∂Ô∏è' == message.text:
                        pyautogui.moveRel(25, 0, duration=0)
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ú—ã—à—å –í–ø—Ä–∞–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif '–õ–ö–ú' == message.text:
                        pyautogui.leftClick()
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –õ–ö–ú –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif '–ü–ö–ú' == message.text:
                        pyautogui.rightClick()
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ü–ö–ú –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üóí–î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á' == message.text:
                        pyautogui.hotkey('CTRL', 'SHIFT', 'ESC')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üñº–ú–µ–¥–∏–∞' == message.text:
                        keyboard_manager.Keyboard().add_buttons_media(message.from_user.id)
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ú–µ–¥–∏–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif '‚öôÔ∏è–ü–ö' == message.text:
                        keyboard_manager.Keyboard().add_buttons_control_pc(message.from_user.id)
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ü–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üì±–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' == message.text:
                        keyboard_manager.Keyboard().add_buttons_info(message.from_user.id)
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üåê–ò–Ω—Ç–µ—Ä–Ω–µ—Ç' == message.text:
                        keyboard_manager.Keyboard().add_buttons_internet(message.from_user.id)
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üóÇ–ü—Ä–æ–≥—Ä–∞–º–º—ã' == message.text:
                        keyboard_manager.Keyboard().add_buttons_program(message.from_user.id)
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ü—Ä–æ–≥—Ä–∞–º–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üß©–ú–µ–Ω—é' == message.text:
                        keyboard_manager.Keyboard().add_buttons_menu(message.from_user.id)
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ú–µ–Ω—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üìπ–í–∏–¥–µ–æ' == message.text:
                        keyboard_manager.Keyboard().add_buttons_video(message.from_user.id)
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –í–∏–¥–µ–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üéß–ú—É–∑—ã–∫–∞' == message.text:
                        keyboard_manager.Keyboard().add_buttons_music(message.from_user.id)
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ú—É–∑—ã–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif '‚ö†Ô∏è–ê–¥–º–∏–Ω' == message.text:
                        keyboard_manager.Keyboard().add_buttons_admin(message.from_user.id)
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –ê–¥–º–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif '‚óÄÔ∏è–í–∏–¥–µ–æ' == message.text:
                        pyautogui.hotkey('Shift','P')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –í–∏–¥–µ–æ –ù–∞–∑–∞–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif '–í–∏–¥–µ–æ‚ñ∂Ô∏è' == message.text:
                        pyautogui.hotkey('Shift','N')
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –í–∏–¥–µ–æ –í–ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif '‚å®Ô∏è–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–≤–∞–π—Å–∞–º–∏ –ü–ö' == message.text:
                        keyboard_manager.Keyboard().add_buttons_control_devices(message.from_user.id)
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–≤–∞–π—Å–∞–º–∏ –ü–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üñ±–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à–∫–æ–π' == message.text:
                        keyboard_manager.Keyboard().add_buttons_control_mouse(message.from_user.id)
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à–∫–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif '‚å®Ô∏è–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π' == message.text:
                        keyboard_manager.Keyboard().add_buttons_control_keyboard(message.from_user.id)
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif 'üîã–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º –ü–ö' == message.text:
                        keyboard_manager.Keyboard().add_buttons_control_power(message.from_user.id)
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º –ü–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    elif '‚òÄÔ∏è–Ø—Ä–∫–æ—Å—Ç—å' == message.text:
                        keyboard_manager.Keyboard().add_buttons_brightness(message.from_user.id)
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –Ø—Ä–∫–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        
                    # elif 'üí¨–°–º—Å –Ω–∞ —ç–∫—Ä–∞–Ω' == message.text:
                    #     Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                    #     msg = self.bot.send_message(message.from_user.id, '–ö–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω?üîà')
                    #     self.bot.register_next_step_handler(msg, actions_manager.Actions().text_on_monitor)

                    elif '–ó–≤—É–∫üîà' == message.text:
                        Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                        msg = self.bot.send_message(message.from_user.id, '–ù–∞ —Å–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü –≤—ã—Å—Ç–∞–≤–∏—Ç—å –∑–≤—É–∫, —Å—ç—Ä?üîà')
                        self.bot.register_next_step_handler(msg, actions_manager.Actions().set_volume)
                                                                                         
                    elif '‚è≥–¢–∞–π–º–µ—Ä –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö' == message.text:
                        Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                        msg = self.bot.send_message(message.from_user.id, '–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –≤—ã–∫–ª—é—á–∏—Ç—å –ü–ö, —Å—ç—Ä?‚è≥')
                        self.bot.register_next_step_handler(msg, actions_manager.Actions().pc_off_time)
  
                    elif 'üîó–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É' == message.text:
                        Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                        msg = self.bot.send_message(message.from_user.id, '–ö–∞–∫—É—é —Å—Å—ã–ª–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å, —Å—ç—Ä?üîé')
                        self.bot.register_next_step_handler(msg, actions_manager.Actions().open_url)
                        
                    elif message.text.split(' ')[0] == '–û—Ç–∫—Ä—ã—Ç—å':
                        actions_manager.Actions().open_exe(message.text)
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫—Ä—ã—Ç—å {message.text} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')

                    elif message.text.split(' ')[0] == '–°—Ü–µ–Ω–∞—Ä–∏–π':
                        actions_manager.Actions().do_script(message.text)
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ {message.text} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        

                    elif 'ü§ñ–ö–æ–º–∞–Ω–¥–∞ –î–∂–∞—Ä–≤–∏—Å—É' == message.text:
                        Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                        msg = self.bot.send_message(message.from_user.id, '–ö–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –î–∂–∞—Ä–≤–∏—Å–∞, —Å—ç—Ä?üîó')
                        self.bot.register_next_step_handler(msg, actions_manager.Actions().text_to_jarvis)                                              

                    elif 'üîê–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å' == message.text:
                        Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                        msg = self.bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:\n0000 - —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è')
                        self.bot.register_next_step_handler(msg, actions_manager.Actions().new_password)
                        
                    
                    elif 'üßπ–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É Temp' == message.text:
                        Telegram().bot.send_message(message.from_user.id, text= actions_manager.Actions().clean_temp_folder())
                        ui.MainWindow().log_print(f'–ö–æ–º–∞–Ω–¥–∞ –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É Temp –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ - {message.from_user.username}')
                        

                    elif 'üñº–°–º–µ–Ω–∏—Ç—å –æ–±–æ–∏' == message.text:
                        Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                        msg = self.bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –æ–±–æ–∏, —Å—ç—Äüñº')
                        self.bot.register_next_step_handler(msg, actions_manager.Actions().wallpaper)
                        
                        
                    elif '‚úçÔ∏è–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞' == message.text:
                        Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                        msg = self.bot.send_message(message.from_user.id, '–ß—Ç–æ –ø–µ—á–∞—Ç–∞–µ–º, —Å—ç—Ä?‚úçÔ∏è')
                        self.bot.register_next_step_handler(msg, actions_manager.Actions().write_text)
                        
                    
                    elif 'üî†–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏' == message.text:
                        Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                        msg = self.bot.send_message(message.from_user.id, '–ö–∞–∫—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞—Ç—å, —Å—ç—Ä?‚úçÔ∏è\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É')
                        self.bot.register_next_step_handler(msg, actions_manager.Actions().press_btn)
                        
                    elif 'üß†ChatGPT' == message.text:
                        CHAT_GPT = True
                        buttons = ReplyKeyboardMarkup(resize_keyboard=True)
                        buttons.add('‚ùå–ó–∞–∫—Ä—ã—Ç—å ChatGPT')
                        Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                        msg = self.bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è ChatGPT, —Å—ç—Ä‚úçÔ∏è\n\nChatGPT –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ, —Ç.–∫ –ê–ü–ò –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤ –†–§, –æ—Ç –º–µ–Ω—è —ç—Ç–æ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç, –Ω–∞–¥–µ—é—Å—å –Ω–∞ –≤–∞—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ ‚ù§Ô∏è', reply_markup=buttons)
                        if actions_manager.Actions().api_key() != '':
                            self.bot.register_next_step_handler(msg, actions_manager.Actions().chatgpt_text_api)
                        else:
                            self.bot.register_next_step_handler(msg, actions_manager.Actions().chatgpt_text)
                        
                    # elif 'üß†–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ ChatGPT' == message.text:
                    #     Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                    #     msg = self.bot.send_message(message.from_user.id, '–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –¥–ª—è ChatGPT, —Å—ç—Ä?‚úçÔ∏è')
                    #     self.bot.register_next_step_handler(msg, actions_manager.Actions().chatgpt_photo)
                        
                    elif 'üé¶–ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞' == message.text:
                        Thread(target=actions_manager.Actions().video_record, args=(message,), daemon=True).start()
                        

                    elif 'üñ•–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ü–ö' == message.text:
                        actions_manager.Actions().pc_param(message)
                        
                    
                    elif 'üåêSpeedtest' == message.text:
                        actions_manager.Actions().speed_net(message)
                        
                    
                    elif 'üñ±–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ X,Y' == message.text:
                        Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                        msg = self.bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º—ã—à–∏, —Å—ç—Ä‚úçÔ∏è\n–ü—Ä–∏–º–µ—Ä: 1920 1080')
                        self.bot.register_next_step_handler(msg, actions_manager.Actions().move_cursor)
                        

                else: 
                    ui.MainWindow().log_print(f'{message.text} - {message.from_user.username} - –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.')
                
                if config.getfloat('Settings', 'del_delay') != '':
                    if CHAT_GPT is False:
                        Thread(target= actions_manager.Actions().del_tg_msg, args=(message,)).start()
            
            except Exception as e:
                ui.MainWindow().error_print(e)
                ui.MainWindow().log_print('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª config.')
                pass

        @self.bot.message_handler(content_types=['voice'])
        def start(message):
            """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–≤—É–∫–æ–≤–æ–º —Ñ–∞–π–ª–µ."""
            if config.getboolean('Settings','jarvis'):
                file_id = message.voice.file_id
                file = self.bot.get_file(file_id)
                file_name = f"voices\\{message.from_user.id}@{file.file_unique_id}.ogg"
                df = self.bot.download_file(file.file_path)
                with open(file_name, 'wb') as new_file:
                    new_file.write(df)
                text=utils.get_text(file_name)
                link=self.jarvis_link
                if not text:
                    ui.MainWindow().log_print('–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.')
                    self.bot.reply_to(message, f'–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.')
                else:
                    if link != 'False':
                        try:
                            requests.get(link+text)
                            self.bot.reply_to(message, f'–ü–µ—Ä–µ–¥–∞–Ω–æ –≤ –î–∂–∞—Ä–≤–∏—Å–∞:\n{text} ‚úÖ')
                        except Exception as e:
                            ui.MainWindow().error_print(e)
                            ui.MainWindow()('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –î–∂–∞—Ä–≤–∏—Å–∞.')
                            Telegram().bot.send_chat_action(message.from_user.id, 'typing')
                            self.bot.send_message(message.from_user.id, text='–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–∂–∞—Ä–≤–∏—Å–∞ –≤ —Ñ–∞–π–ª–µ config.')
                    else:
                        ui.MainWindow()('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –î–∂–∞—Ä–≤–∏—Å–∞.')
                        self.bot.send_chat_action(message.from_user.id, 'typing')
                        self.bot.send_message(message.from_user.id, text='–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–∂–∞—Ä–≤–∏—Å–∞ –≤ —Ñ–∞–π–ª–µ config.')
                try:
                    os.remove(file_name)
                    os.remove(file_name+'.wav')
                except Exception as e:
                    ui.MainWindow().error_print(e)
                    ui.MainWindow().log_print('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞')
                    pass
            else:
                ui.MainWindow().log_print('–ü–µ—Ä–µ–¥–∞—á–∞ —Ç–µ–∫—Å—Ç–∞ –î–∂–∞—Ä–≤–∏—Å—É –æ—Ç–∫–ª—é—á–µ–Ω–∞')
                self.bot.send_chat_action(message.from_user.id, 'typing')
                self.bot.send_message(message.from_user.id, text='–ü–µ—Ä–µ–¥–∞—á–∞ —Ç–µ–∫—Å—Ç–∞ –î–∂–∞—Ä–≤–∏—Å—É –æ—Ç–∫–ª—é—á–µ–Ω–∞‚ùå')

    def read_config(self):
        """–°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö token –∏ chat id –∏–∑ config.ini."""
        config=configparser.ConfigParser()
        config.read("config.ini", encoding='utf-8')
        return [config['Settings']['token'], config['Settings']['chat_id'], config['Settings']['jarvis_link']]
    
    def start_message(self) -> None:
        """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ü–ö."""
        global start_msg_id
        photo = config.get('Settings', 'photo')
        if not photo:
            photo = 'bin/PC_Started.png'
        chat_ids = self.chat_id.replace(' ', '').split(',')

        try:
            for chat_id in chat_ids:
                # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
                with open(os.path.abspath(photo), 'rb') as ph:
                    self.bot.send_chat_action(chat_id, 'upload_photo')
                    msg = self.bot.send_photo(
                        chat_id=chat_id,
                        photo=ph,
                        caption=actions_manager.Actions().create_start_response(),
                        reply_markup=keyboard_manager.Keyboard().add_buttons()
                    )
                    start_msg_id = msg.id
                    ui.MainWindow().log_print(f'–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ - {chat_id}')
        except FileNotFoundError:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            ui.MainWindow().log_print('–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')
            for chat_id in chat_ids:
                self.bot.send_chat_action(chat_id, 'typing')
                msg = self.bot.send_message(
                    chat_id=chat_id,
                    text=actions_manager.Actions().create_start_response(),
                    reply_markup=keyboard_manager.Keyboard().add_buttons()
                )
                start_msg_id = msg.id
                ui.MainWindow().log_print(f'–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - {chat_id}')
        except (Exception, telebot.apihelper.ApiException) as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
            ui.MainWindow().error_print(e)
            ui.MainWindow().log_print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')
            ui.MainWindow().log_print('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≤–∞–º–∏ –¢–æ–∫–µ–Ω')
            ui.MainWindow().log_print('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à chat_id')
            ui.MainWindow().log_print('–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É, –µ—Å–ª–∏ –≤—ã —ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–ª–∏.')
            ui.start_btn.configure(state=ctk.NORMAL)
            utils.autostart_off()
            return

        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        ui.MainWindow().log_print('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
        Thread(target=self.start_bot, args=(), name='Start_bot', daemon=True).start()
    
    def start_bot(self) -> None:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        u = ctypes.windll.LoadLibrary("user32.dll")
        pf = getattr(u, "GetKeyboardLayout")
        if hex(pf(0)) == '0x4190419':
            keyboard_layout.change_foreground_window_keyboard_layout(0x04090409)

        while True:
            try:
                ui.MainWindow().log_print('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.')
                self.bot.polling(interval=1)
            except telebot.apihelper.ApiException as e:
                ui.MainWindow().error_print(e)
                ui.MainWindow().log_print('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≤–∞–º–∏ –¢–æ–∫–µ–Ω')
                ui.MainWindow().log_print('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à chat_id')
                ui.MainWindow().log_print('–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É, –µ—Å–ª–∏ –≤—ã —ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–ª–∏.')
                ui.start_btn.configure(state = ctk.NORMAL)
                utils.autostart_off()
                return
            except Exception as e:
                ui.MainWindow().error_print(e)
                ui.MainWindow().log_print(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...\n{e}")
                time.sleep(5)
                return self.start_bot()